CONCLUSIES / OBSERVATIES UIT DEZE RESULTATEN:
- Grayscale heeft minder train images nodig, deze haalt al (redelijke) resultaten bij 50 train images. Color images werken vaak pas redelijk vanaf 75 a 100 train images.
- RGB lijkt beter te werken dan rgb, misschien doordat er informatie weggegooid wordt bij rgb?
- Opponent werkt zeer goed voor cars en faces
- Aantal clusters is zeker van invloed, teveel clusters is niet goed (soms werkt 200 beter dan 400)
- Dense: meerdere window sizes geeft grotere preciezie
- Dense: window sizes moeten niet te klein worden, dan lijkt het te weinig features te pakken te krijgen



frame(50, 50, 20, 400, 'dense', 'opponent', [4 8], 20)
av_mean = 0.1432    0.3192    0.1973    0.1432
av_mean_p = 0.2007


frame(75, 75, 20, 400, 'dense', 'opponent', [4 8], 20)
av_mean = 0.6368    0.8591    0.9885    0.9108
av_mean_p = 0.8488


frame(75, 75, 50, 400, 'dense', 'opponent', [4 8], 20)
av_mean = 0.6447    0.9053    0.9510    0.7516
av_mean_p = 0.8132


frame(75, 75, 50, 400, 'dense', 'opponent', [4 8], 10)
av_mean = 0.6823    0.8654    0.9444    0.6934
av_mean_p = 0.7964


frame(75, 75, 50, 400, 'dense', 'opponent', [4 8 12], 20)
av_mean = 0.6739    0.8838    0.9887    0.6968
av_mean_p = 0.8108


frame(75, 75, 50, 400, 'dense', 'opponent', [4 8 12], 10)
av_mean = 0.6715    0.8771    0.9890    0.8608
av_mean_p = 0.8496


frame(75, 75, 50, 400, 'dense', 'opponent', [4 12 16], 10)
av_mean = 0.7168    0.8911    1.0000    0.7676
av_mean_p = 0.8439


frame(75, 75, 50, 400, 'dense', 'opponent', [2 4 8], 10)
av_mean = 0.6248    0.8322    0.9824    0.7431
av_mean_p = 0.7956

 
frame(90, 90, 50, 400, 'dense', 'opponent', [4 8], 20)
av_mean = 0.6436    0.9528    0.5077    0.7314
av_mean_p = 0.7089


frame(90, 90, 50, 400, 'dense', 'RGB', [4 8], 20)
av_mean = 0.6367    0.8501    0.9112    0.7134
av_mean_p = 0.7778


frame(90, 90, 50, 400, 'dense', 'RGB', [4 12 16], 10)
av_mean = 0.6880    0.9681    0.9789    0.7679
av_mean_p = 0.8507


frame(90, 90, 50, 200, 'dense', 'RGB', [4 12 16], 10)
av_mean = 0.7257    0.9763    0.9979    0.8994
av_mean_p = 0.8998  (BIJNA 90 PROCENT :D)


frame(100, 100, 50, 50, 'dense', 'RGB', [4 8], 10)
av_mean = 0.7252    0.9165    0.9732    0.7741
av_mean_p = 0.8473


frame(75, 75, 50, 400, 'dense', 'RGB', [8 12], 8)
av_mean = 0.7069    0.8733    0.4617    0.7462
av_mean_p = 0.6970


frame(50, 50, 50, 400, 'dense', 'normalizedRGB', [4 8], 10)
av_mean = 0.1394    0.3118    0.1924    0.1394
av_mean_p = 0.1958


frame(90, 90, 50, 200, 'dense', 'normalizedRGB', [4 8], 10)
av_mean = 0.7917    0.7783    0.4930    0.6216
av_mean_p = 0.6711


frame(75, 75, 50, 400, 'dense', 'normalizedRGB', [4 8], 10)
av_mean = 0.5657    0.3751    0.5405    0.5645
av_mean_p = 0.5115


frame(75, 75, 50, 200, 'dense', 'normalizedRGB', [8 12], 10)
av_mean = 0.7744    0.4643    0.7608    0.5968
av_mean_p = 0.6491

frame(75, 75, 50, 200, 'dense', 'normalizedRGB', [8 12], 15)
av_mean = 0.4956    0.1707    0.4357    0.5961
av_mean_p = 0.4245